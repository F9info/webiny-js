{"ast":null,"code":"import _toConsumableArray from \"D:/webiny/webiny-v5/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport ApolloClient from \"apollo-client\";\nimport { ApolloLink } from \"apollo-link\";\nimport { BatchHttpLink } from \"apollo-link-batch-http\";\nimport { ErrorLink } from \"apollo-link-error\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { createOmitTypenameLink } from \"@webiny/app/graphql\";\nimport { plugins } from \"@webiny/plugins\";\nimport { GET_ERROR } from \"./NetworkError\";\nexport var createApolloClient = function createApolloClient() {\n  return new ApolloClient({\n    link: ApolloLink.from([\n    /**\n     * This link will store information about the error into Apollo Cache. We then use it within `NetworkError`\n     * component to render useful information and directions on how to proceed.\n     */\n    new ErrorLink(function (_ref) {\n      var networkError = _ref.networkError,\n          operation = _ref.operation;\n\n      if (networkError) {\n        var _operation$getContext = operation.getContext(),\n            cache = _operation$getContext.cache;\n\n        cache.writeQuery({\n          query: GET_ERROR,\n          data: {\n            networkError: \"UNAVAILABLE\"\n          }\n        });\n      }\n    }),\n    /**\n     * This link removes `__typename` from the variables being sent to the API.\n     */\n    createOmitTypenameLink()].concat(_toConsumableArray(plugins.byType(\"apollo-link\").map(function (pl) {\n      return pl.createLink();\n    })), [\n    /**\n     * This batches requests made to the API to pack multiple requests into a single HTTP request.\n     */\n    new BatchHttpLink({\n      uri: process.env.REACT_APP_GRAPHQL_API_URL\n    })])),\n    cache: new InMemoryCache({\n      addTypename: true,\n      dataIdFromObject: function dataIdFromObject(obj) {\n        return obj.id || null;\n      }\n    })\n  });\n};","map":{"version":3,"sources":["D:/webiny/webiny-v5/apps/admin/code/components/apolloClient.ts"],"names":["ApolloClient","ApolloLink","BatchHttpLink","ErrorLink","InMemoryCache","createOmitTypenameLink","plugins","GET_ERROR","createApolloClient","link","from","networkError","operation","getContext","cache","writeQuery","query","data","byType","map","pl","createLink","uri","process","env","REACT_APP_GRAPHQL_API_URL","addTypename","dataIdFromObject","obj","id"],"mappings":";AAAA,OAAOA,YAAP,MAAyB,eAAzB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,sBAAT,QAAuC,qBAAvC;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,SAAT,QAA0B,gBAA1B;AAEA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AACpC,SAAO,IAAIR,YAAJ,CAAiB;AACpBS,IAAAA,IAAI,EAAER,UAAU,CAACS,IAAX;AACF;AACZ;AACA;AACA;AACY,QAAIP,SAAJ,CAAc,gBAAiC;AAAA,UAA9BQ,YAA8B,QAA9BA,YAA8B;AAAA,UAAhBC,SAAgB,QAAhBA,SAAgB;;AAC3C,UAAID,YAAJ,EAAkB;AAAA,oCACIC,SAAS,CAACC,UAAV,EADJ;AAAA,YACNC,KADM,yBACNA,KADM;;AAEdA,QAAAA,KAAK,CAACC,UAAN,CAAiB;AACbC,UAAAA,KAAK,EAAET,SADM;AAEbU,UAAAA,IAAI,EAAE;AACFN,YAAAA,YAAY,EAAE;AADZ;AAFO,SAAjB;AAMH;AACJ,KAVD,CALE;AAgBF;AACZ;AACA;AACYN,IAAAA,sBAAsB,EAnBpB,4BAwBCC,OAAO,CAACY,MAAR,CAAe,aAAf,EAA8BC,GAA9B,CAAkC,UAAAC,EAAE;AAAA,aAAIA,EAAE,CAACC,UAAH,EAAJ;AAAA,KAApC,CAxBD;AAyBF;AACZ;AACA;AACY,QAAInB,aAAJ,CAAkB;AAAEoB,MAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAAnB,KAAlB,CA5BE,GADc;AA+BpBX,IAAAA,KAAK,EAAE,IAAIV,aAAJ,CAAkB;AACrBsB,MAAAA,WAAW,EAAE,IADQ;AAErBC,MAAAA,gBAAgB,EAAE,0BAAAC,GAAG;AAAA,eAAIA,GAAG,CAACC,EAAJ,IAAU,IAAd;AAAA;AAFA,KAAlB;AA/Ba,GAAjB,CAAP;AAoCH,CArCM","sourcesContent":["import ApolloClient from \"apollo-client\";\nimport { ApolloLink } from \"apollo-link\";\nimport { BatchHttpLink } from \"apollo-link-batch-http\";\nimport { ErrorLink } from \"apollo-link-error\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { createOmitTypenameLink } from \"@webiny/app/graphql\";\nimport { plugins } from \"@webiny/plugins\";\nimport { GET_ERROR } from \"./NetworkError\";\n\nexport const createApolloClient = () => {\n    return new ApolloClient({\n        link: ApolloLink.from([\n            /**\n             * This link will store information about the error into Apollo Cache. We then use it within `NetworkError`\n             * component to render useful information and directions on how to proceed.\n             */\n            new ErrorLink(({ networkError, operation }) => {\n                if (networkError) {\n                    const { cache } = operation.getContext();\n                    cache.writeQuery({\n                        query: GET_ERROR,\n                        data: {\n                            networkError: \"UNAVAILABLE\"\n                        }\n                    });\n                }\n            }),\n            /**\n             * This link removes `__typename` from the variables being sent to the API.\n             */\n            createOmitTypenameLink(),\n            /**\n             * This allows you to register links using plugins. For example, \"app-plugin-security-cognito\" package\n             * adds an authorization header to each request by registering an \"apollo-link\" plugin.\n             */\n            ...plugins.byType(\"apollo-link\").map(pl => pl.createLink()),\n            /**\n             * This batches requests made to the API to pack multiple requests into a single HTTP request.\n             */\n            new BatchHttpLink({ uri: process.env.REACT_APP_GRAPHQL_API_URL })\n        ]),\n        cache: new InMemoryCache({\n            addTypename: true,\n            dataIdFromObject: obj => obj.id || null\n        })\n    });\n};\n"]},"metadata":{},"sourceType":"module"}