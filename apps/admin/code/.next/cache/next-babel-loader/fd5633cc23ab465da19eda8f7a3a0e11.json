{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { LOGIN } from \"@webiny/app-security-user-management/graphql\";\n/**\n * `getIdentityData` is a function that has to return information about the identity (a user within Webiny).\n * ========================================================================================\n * This function will be executed after Cognito (or any other identity provider you may use) validates the credentials\n * and obtains a valid JWT. Since JWT doesn't contain all the necessary information about a user, we need to perform the\n * \"login\" mutation, which doesn't really do anything except fetches the user's information our app needs (like permissions, avatar, etc.)\n *\n * Using this \"login\" mutation you can return custom data relevant to the business logic of your app.\n * The `payload` argument contains the whole JWT token so you can conditionally perform different mutations depending on\n * the information contained within the JWT.\n */\n\n/* eslint-disable-next-line @typescript-eslint/no-unused-vars */\n\nexport const getIdentityData = async ({\n  client,\n  payload\n}) => {\n  const {\n    data\n  } = await client.mutate({\n    mutation: LOGIN\n  });\n  const identity = data.security.login.data;\n  return _objectSpread(_objectSpread({}, identity), {}, {\n    avatar: identity.avatar ? identity.avatar : {\n      src: identity.gravatar\n    }\n  });\n};","map":{"version":3,"sources":["D:/webiny/webiny-v5/apps/admin/code/components/getIdentityData.ts"],"names":["LOGIN","getIdentityData","client","payload","data","mutate","mutation","identity","security","login","avatar","src","gravatar"],"mappings":";;;;;;AAAA,SAASA,KAAT,QAAsB,8CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA,OAAO,MAAMC,eAAe,GAAG,OAAO;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAP,KAA+B;AAC1D,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMF,MAAM,CAACG,MAAP,CAAc;AAAEC,IAAAA,QAAQ,EAAEN;AAAZ,GAAd,CAAvB;AACA,QAAMO,QAAQ,GAAGH,IAAI,CAACI,QAAL,CAAcC,KAAd,CAAoBL,IAArC;AAEA,yCACOG,QADP;AAEIG,IAAAA,MAAM,EAAEH,QAAQ,CAACG,MAAT,GAAkBH,QAAQ,CAACG,MAA3B,GAAoC;AAAEC,MAAAA,GAAG,EAAEJ,QAAQ,CAACK;AAAhB;AAFhD;AAIH,CARM","sourcesContent":["import { LOGIN } from \"@webiny/app-security-user-management/graphql\";\n\n/**\n * `getIdentityData` is a function that has to return information about the identity (a user within Webiny).\n * ========================================================================================\n * This function will be executed after Cognito (or any other identity provider you may use) validates the credentials\n * and obtains a valid JWT. Since JWT doesn't contain all the necessary information about a user, we need to perform the\n * \"login\" mutation, which doesn't really do anything except fetches the user's information our app needs (like permissions, avatar, etc.)\n *\n * Using this \"login\" mutation you can return custom data relevant to the business logic of your app.\n * The `payload` argument contains the whole JWT token so you can conditionally perform different mutations depending on\n * the information contained within the JWT.\n */\n\n/* eslint-disable-next-line @typescript-eslint/no-unused-vars */\nexport const getIdentityData = async ({ client, payload }) => {\n    const { data } = await client.mutate({ mutation: LOGIN });\n    const identity = data.security.login.data;\n\n    return {\n        ...identity,\n        avatar: identity.avatar ? identity.avatar : { src: identity.gravatar }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}