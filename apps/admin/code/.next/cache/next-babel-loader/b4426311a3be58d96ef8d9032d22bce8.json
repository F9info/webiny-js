{"ast":null,"code":"import _extends from \"D:/webiny/webiny-v5/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"D:/webiny/webiny-v5/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"D:/webiny/webiny-v5/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\webiny\\\\webiny-v5\\\\apps\\\\admin\\\\code\\\\plugins\\\\theme\\\\formBuilder\\\\layouts\\\\DefaultFormLayout.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport Input from \"./fields/Input\";\nimport Select from \"./fields/Select\";\nimport Radio from \"./fields/Radio\";\nimport Checkbox from \"./fields/Checkbox\";\nimport Textarea from \"./fields/Textarea\";\nimport { Form } from \"@webiny/form\";\nimport { I18NValue } from \"@webiny/app-i18n/components\";\nimport HelperMessage from \"./components/HelperMessage\";\nimport { validation } from \"@webiny/validation\";\n/**\n * This is the default form layout component, in which we render all the form fields. We also render terms of service\n * and reCAPTCHA (if enabled in form settings), and at the bottom, the submit button. Note that we also utilized\n * the \"webiny-form\" package, which makes working with forms and form fields a walk in the park. Also, as labels for\n * various parts of the form can be translated to different languages via the Form Editor (eg. submit button's label,\n * terms of service message...), we use the I18NValue component, which is a part of the \"webiny-app-i18n\" package.\n *\n * Feel free to use this component as your starting point for your own form layouts. Add or remove things as you like!\n */\n\nvar DefaultFormLayout = function DefaultFormLayout(_ref) {\n  _s();\n\n  var getFields = _ref.getFields,\n      getDefaultValues = _ref.getDefaultValues,\n      submit = _ref.submit,\n      formData = _ref.formData,\n      ReCaptcha = _ref.ReCaptcha,\n      TermsOfService = _ref.TermsOfService;\n\n  // Is the form in loading (submitting) state?\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1]; // Is the form successfully submitted?\n\n\n  var _useState2 = useState(false),\n      formSuccess = _useState2[0],\n      setFormSuccess = _useState2[1]; // All form fields - an array of rows where each row is an array that contain fields.\n\n\n  var fields = getFields();\n  /**\n   * Once the data is successfully submitted, we show a success message.\n   */\n\n  var submitForm = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              _context.next = 3;\n              return submit(data);\n\n            case 3:\n              result = _context.sent;\n              setLoading(false);\n\n              if (result.error === null) {\n                setFormSuccess(true);\n              }\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function submitForm(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  /**\n   * Renders a field cell with a field element inside.\n   */\n\n\n  var renderFieldCell = function renderFieldCell(field, Bind) {\n    return __jsx(\"div\", {\n      key: field._id,\n      className: \"webiny-pb-base-page-element-style webiny-pb-layout-column webiny-fb-form-layout-column\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }, __jsx(Bind, {\n      name: field.fieldId,\n      validators: field.validators,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }\n    }, function (bind) {\n      return __jsx(React.Fragment, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }\n      }, renderFieldElement({\n        field: field,\n        bind: bind\n      }));\n    }));\n  };\n  /**\n   * Renders hidden fields.\n   */\n\n\n  var renderHiddenField = function renderHiddenField(field, Bind) {\n    return __jsx(Bind, {\n      name: field.fieldId,\n      validators: field.validators,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, function (bind) {\n      return __jsx(React.Fragment, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }\n      }, renderFieldElement({\n        field: field,\n        bind: bind\n      }));\n    });\n  };\n  /**\n   * Renders a single form field. You can add additional handling of other field types if needed.\n   * All of these components are located in the \"./fields\" folder.\n   */\n\n\n  var renderFieldElement = function renderFieldElement(props) {\n    switch (props.field.type) {\n      case \"text\":\n        return __jsx(Input, _extends({}, props, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 24\n          }\n        }));\n\n      case \"textarea\":\n        return __jsx(Textarea, _extends({}, props, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 24\n          }\n        }));\n\n      case \"number\":\n        return __jsx(Input, _extends({}, props, {\n          type: \"number\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 24\n          }\n        }));\n\n      case \"select\":\n        return __jsx(Select, _extends({}, props, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 24\n          }\n        }));\n\n      case \"radio\":\n        return __jsx(Radio, _extends({}, props, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 24\n          }\n        }));\n\n      case \"checkbox\":\n        return __jsx(Checkbox, _extends({}, props, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 24\n          }\n        }));\n\n      case \"hidden\":\n        return __jsx(\"input\", {\n          type: \"hidden\",\n          value: props.bind.value,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 24\n          }\n        });\n\n      default:\n        return __jsx(\"span\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 24\n          }\n        }, \"Cannot render field.\");\n    }\n  };\n  /**\n   * Renders Google reCAPTCHA field (checkbox) - to protect us from spam and bots.\n   * For this we use the provided ReCaptcha component, which is a render prop component and a regular component\n   * at the same time, depending if the function was passed as its children. If no children are present, then\n   * it will render the actual Google reCAPTCHA field.\n   * Note that you don't have to worry if the reCAPTCHA was actually enabled via the Form Editor - the component\n   * does necessary checks internally and will not render anything if it isn't supposed to.\n   */\n\n\n  var renderReCaptcha = function renderReCaptcha(Bind) {\n    return __jsx(ReCaptcha, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }\n    }, function (_ref3) {\n      var errorMessage = _ref3.errorMessage;\n      return __jsx(\"div\", {\n        className: \"webiny-fb-form-recaptcha\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }\n      }, __jsx(Bind, {\n        name: \"reCaptcha\",\n        validators: validation.create(\"required\"),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }\n      }, function (_ref4) {\n        var onChange = _ref4.onChange,\n            validation = _ref4.validation;\n        return __jsx(React.Fragment, null, __jsx(ReCaptcha, {\n          onChange: onChange,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 37\n          }\n        }), __jsx(HelperMessage, {\n          isValid: validation.isValid,\n          errorMessage: __jsx(I18NValue, {\n            value: errorMessage,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 55\n            }\n          }),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 37\n          }\n        }));\n      }));\n    });\n  };\n  /**\n   * Renders the Terms of Service checkbox - which forces the user to agree to our Terms of Service\n   * before actually submitting the form.\n   * For this we use the provided TermsOfService component, which is a simple render prop component.\n   * Note that you don't have to worry if the terms of service option was actually enabled via the Form Editor -\n   * the component does necessary checks internally and will not render anything if it isn't supposed to.\n   */\n\n\n  var renderTermsOfService = function renderTermsOfService(Bind) {\n    return __jsx(TermsOfService, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }\n    }, function (_ref5) {\n      var message = _ref5.message,\n          errorMessage = _ref5.errorMessage,\n          onChange = _ref5.onChange;\n      return __jsx(\"div\", {\n        className: \"webiny-fb-form-tos\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }\n      }, __jsx(Bind, {\n        name: \"tosAccepted\",\n        validators: validation.create(\"required\"),\n        afterChange: onChange,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 25\n        }\n      }, function (_ref6) {\n        var _onChange = _ref6.onChange,\n            value = _ref6.value,\n            validation = _ref6.validation;\n        return __jsx(\"div\", {\n          className: \"webiny-fb-form-field webiny-fb-form-field--checkbox\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 33\n          }\n        }, __jsx(\"div\", {\n          className: \"webiny-fb-form-field__checkbox-group\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 37\n          }\n        }, __jsx(\"div\", {\n          className: \"webiny-fb-form-field__checkbox\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 41\n          }\n        }, __jsx(\"input\", {\n          className: \"webiny-fb-form-field__checkbox-input\",\n          type: \"checkbox\",\n          name: \"webiny-tos-checkbox\",\n          id: \"webiny-tos-checkbox\",\n          checked: Boolean(value),\n          onChange: function onChange() {\n            return _onChange(!value);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 45\n          }\n        }), __jsx(\"label\", {\n          htmlFor: \"webiny-tos-checkbox\",\n          className: \"webiny-fb-form-field__checkbox-label\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 45\n          }\n        }, __jsx(I18NValue, {\n          value: message,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 49\n          }\n        })))), __jsx(HelperMessage, {\n          isValid: validation.isValid,\n          errorMessage: __jsx(I18NValue, {\n            value: errorMessage,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 55\n            }\n          }),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 37\n          }\n        }));\n      }));\n    });\n  };\n  /**\n   * Renders the success message.\n   */\n\n\n  var renderSuccessMessage = function renderSuccessMessage() {\n    return __jsx(\"div\", {\n      className: \"webiny-pb-base-page-element-style webiny-pb-layout-row webiny-fb-form-layout-row\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      className: \"webiny-pb-base-page-element-style webiny-pb-layout-column webiny-fb-form-layout-column\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", {\n      className: \"webiny-fb-form-form__success-message\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 21\n      }\n    }, __jsx(\"div\", {\n      className: \"webiny-fb-form-field__label webiny-pb-typography-h3\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 25\n      }\n    }, __jsx(I18NValue, {\n      value: formData.settings.successMessage,\n      \"default\": \"Thanks!\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 29\n      }\n    })))));\n  };\n  /**\n   * Renders the form submit button. We disable the button if the form is in the loading state.\n   */\n\n\n  var renderSubmitButton = function renderSubmitButton(submit, loading, tosAccepted, buttonLabel) {\n    return __jsx(\"div\", {\n      className: \"webiny-fb-form-submit-button\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 13\n      }\n    }, __jsx(\"button\", {\n      className: \"webiny-fb-form-page-element-button webiny-pb-page-element-button webiny-pb-page-element-button--primary\" + (loading ? \" webiny-pb-element-button--loading\" : \"\"),\n      onClick: submit,\n      disabled: loading,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }\n    }, __jsx(I18NValue, {\n      value: buttonLabel,\n      \"default\": \"Submit\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 21\n      }\n    })));\n  };\n\n  return (\n    /* \"onSubmit\" callback gets triggered once all of the fields are valid. */\n\n    /* We also pass the default values for all fields via the getDefaultValues callback. */\n    __jsx(Form, {\n      onSubmit: submitForm,\n      data: getDefaultValues(),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }\n    }, function (_ref7) {\n      var submit = _ref7.submit,\n          Bind = _ref7.Bind,\n          data = _ref7.data;\n      return __jsx(\"div\", {\n        className: \"webiny-fb-form\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 17\n        }\n      }, formSuccess ? renderSuccessMessage() : __jsx(React.Fragment, null, __jsx(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 29\n        }\n      }, fields.map(function (row, rowIndex) {\n        return __jsx(\"div\", {\n          key: rowIndex,\n          className: \"webiny-pb-base-page-element-style webiny-pb-layout-row webiny-fb-form-layout-row\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 37\n          }\n        }, row.map(function (field) {\n          return field.type !== \"hidden\" ? renderFieldCell(field, Bind) : renderHiddenField(field, Bind);\n        }));\n      })), renderTermsOfService(Bind), renderReCaptcha(Bind), renderSubmitButton(submit, loading, data.tosAccepted, formData.settings.submitButtonLabel)));\n    })\n  );\n};\n\n_s(DefaultFormLayout, \"gLx6wK+wGk9Jf/tPj2jPoY42V7k=\");\n\n_c = DefaultFormLayout;\nexport default DefaultFormLayout;\n\nvar _c;\n\n$RefreshReg$(_c, \"DefaultFormLayout\");","map":{"version":3,"sources":["D:/webiny/webiny-v5/apps/admin/code/plugins/theme/formBuilder/layouts/DefaultFormLayout.tsx"],"names":["React","useState","Input","Select","Radio","Checkbox","Textarea","Form","I18NValue","HelperMessage","validation","DefaultFormLayout","getFields","getDefaultValues","submit","formData","ReCaptcha","TermsOfService","loading","setLoading","formSuccess","setFormSuccess","fields","submitForm","data","result","error","renderFieldCell","field","Bind","_id","fieldId","validators","bind","renderFieldElement","renderHiddenField","props","type","value","renderReCaptcha","errorMessage","create","onChange","isValid","renderTermsOfService","message","Boolean","renderSuccessMessage","settings","successMessage","renderSubmitButton","tosAccepted","buttonLabel","map","row","rowIndex","submitButtonLabel"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Input from \"./fields/Input\";\nimport Select from \"./fields/Select\";\nimport Radio from \"./fields/Radio\";\nimport Checkbox from \"./fields/Checkbox\";\nimport Textarea from \"./fields/Textarea\";\nimport { BindComponentRenderProp, Form } from \"@webiny/form\";\nimport { I18NValue } from \"@webiny/app-i18n/components\";\nimport HelperMessage from \"./components/HelperMessage\";\nimport { FbFormModelField, FormLayoutComponent } from \"@webiny/app-form-builder/types\";\nimport { validation } from \"@webiny/validation\";\n\n/**\n * This is the default form layout component, in which we render all the form fields. We also render terms of service\n * and reCAPTCHA (if enabled in form settings), and at the bottom, the submit button. Note that we also utilized\n * the \"webiny-form\" package, which makes working with forms and form fields a walk in the park. Also, as labels for\n * various parts of the form can be translated to different languages via the Form Editor (eg. submit button's label,\n * terms of service message...), we use the I18NValue component, which is a part of the \"webiny-app-i18n\" package.\n *\n * Feel free to use this component as your starting point for your own form layouts. Add or remove things as you like!\n */\nconst DefaultFormLayout: FormLayoutComponent = ({\n    getFields,\n    getDefaultValues,\n    submit,\n    formData,\n    ReCaptcha,\n    TermsOfService\n}) => {\n    // Is the form in loading (submitting) state?\n    const [loading, setLoading] = useState(false);\n\n    // Is the form successfully submitted?\n    const [formSuccess, setFormSuccess] = useState(false);\n\n    // All form fields - an array of rows where each row is an array that contain fields.\n    const fields = getFields();\n\n    /**\n     * Once the data is successfully submitted, we show a success message.\n     */\n    const submitForm = async data => {\n        setLoading(true);\n        const result = await submit(data);\n        setLoading(false);\n        if (result.error === null) {\n            setFormSuccess(true);\n        }\n    };\n\n    /**\n     * Renders a field cell with a field element inside.\n     */\n    const renderFieldCell = (field, Bind) => {\n        return (\n            <div\n                key={field._id}\n                className={\n                    \"webiny-pb-base-page-element-style webiny-pb-layout-column webiny-fb-form-layout-column\"\n                }\n            >\n                <Bind name={field.fieldId} validators={field.validators}>\n                    {bind => (\n                        <React.Fragment>\n                            {/* Render element */}\n                            {renderFieldElement({\n                                field,\n                                bind\n                            })}\n                        </React.Fragment>\n                    )}\n                </Bind>\n            </div>\n        );\n    };\n\n    /**\n     * Renders hidden fields.\n     */\n    const renderHiddenField = (field, Bind) => {\n        return (\n            <Bind name={field.fieldId} validators={field.validators}>\n                {bind => (\n                    <React.Fragment>\n                        {/* Render input */}\n                        {renderFieldElement({\n                            field,\n                            bind\n                        })}\n                    </React.Fragment>\n                )}\n            </Bind>\n        );\n    };\n\n    /**\n     * Renders a single form field. You can add additional handling of other field types if needed.\n     * All of these components are located in the \"./fields\" folder.\n     */\n    const renderFieldElement = (props: {\n        field: FbFormModelField;\n        bind: BindComponentRenderProp;\n    }) => {\n        switch (props.field.type) {\n            case \"text\":\n                return <Input {...props} />;\n            case \"textarea\":\n                return <Textarea {...props} />;\n            case \"number\":\n                return <Input {...props} type=\"number\" />;\n            case \"select\":\n                return <Select {...props} />;\n            case \"radio\":\n                return <Radio {...props} />;\n            case \"checkbox\":\n                return <Checkbox {...props} />;\n            case \"hidden\":\n                return <input type=\"hidden\" value={props.bind.value} />;\n            default:\n                return <span>Cannot render field.</span>;\n        }\n    };\n\n    /**\n     * Renders Google reCAPTCHA field (checkbox) - to protect us from spam and bots.\n     * For this we use the provided ReCaptcha component, which is a render prop component and a regular component\n     * at the same time, depending if the function was passed as its children. If no children are present, then\n     * it will render the actual Google reCAPTCHA field.\n     * Note that you don't have to worry if the reCAPTCHA was actually enabled via the Form Editor - the component\n     * does necessary checks internally and will not render anything if it isn't supposed to.\n     */\n    const renderReCaptcha = Bind => {\n        return (\n            <ReCaptcha>\n                {({ errorMessage }) => (\n                    <div className=\"webiny-fb-form-recaptcha\">\n                        <Bind name={\"reCaptcha\"} validators={validation.create(\"required\")}>\n                            {({ onChange, validation }) => (\n                                <>\n                                    <ReCaptcha onChange={onChange} />\n                                    <HelperMessage\n                                        isValid={validation.isValid}\n                                        errorMessage={<I18NValue value={errorMessage} />}\n                                    />\n                                </>\n                            )}\n                        </Bind>\n                    </div>\n                )}\n            </ReCaptcha>\n        );\n    };\n\n    /**\n     * Renders the Terms of Service checkbox - which forces the user to agree to our Terms of Service\n     * before actually submitting the form.\n     * For this we use the provided TermsOfService component, which is a simple render prop component.\n     * Note that you don't have to worry if the terms of service option was actually enabled via the Form Editor -\n     * the component does necessary checks internally and will not render anything if it isn't supposed to.\n     */\n    const renderTermsOfService = Bind => {\n        return (\n            <TermsOfService>\n                {({ message, errorMessage, onChange }) => (\n                    <div className=\"webiny-fb-form-tos\">\n                        <Bind\n                            name={\"tosAccepted\"}\n                            validators={validation.create(\"required\")}\n                            afterChange={onChange}\n                        >\n                            {({ onChange, value, validation }) => (\n                                <div className=\"webiny-fb-form-field webiny-fb-form-field--checkbox\">\n                                    <div className=\"webiny-fb-form-field__checkbox-group\">\n                                        <div className=\"webiny-fb-form-field__checkbox\">\n                                            <input\n                                                className=\"webiny-fb-form-field__checkbox-input\"\n                                                type={\"checkbox\"}\n                                                name=\"webiny-tos-checkbox\"\n                                                id=\"webiny-tos-checkbox\"\n                                                checked={Boolean(value)}\n                                                onChange={() => onChange(!value)}\n                                            />\n                                            <label\n                                                htmlFor={\"webiny-tos-checkbox\"}\n                                                className=\"webiny-fb-form-field__checkbox-label\"\n                                            >\n                                                <I18NValue value={message} />\n                                            </label>\n                                        </div>\n                                    </div>\n                                    <HelperMessage\n                                        isValid={validation.isValid}\n                                        errorMessage={<I18NValue value={errorMessage} />}\n                                    />\n                                </div>\n                            )}\n                        </Bind>\n                    </div>\n                )}\n            </TermsOfService>\n        );\n    };\n\n    /**\n     * Renders the success message.\n     */\n    const renderSuccessMessage = () => {\n        return (\n            <div\n                className={\n                    \"webiny-pb-base-page-element-style webiny-pb-layout-row webiny-fb-form-layout-row\"\n                }\n            >\n                <div\n                    className={\n                        \"webiny-pb-base-page-element-style webiny-pb-layout-column webiny-fb-form-layout-column\"\n                    }\n                >\n                    <div className=\"webiny-fb-form-form__success-message\">\n                        <div className=\"webiny-fb-form-field__label webiny-pb-typography-h3\">\n                            <I18NValue value={formData.settings.successMessage} default=\"Thanks!\" />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n\n    /**\n     * Renders the form submit button. We disable the button if the form is in the loading state.\n     */\n    const renderSubmitButton = (submit, loading, tosAccepted, buttonLabel) => {\n        return (\n            <div className=\"webiny-fb-form-submit-button\">\n                <button\n                    className={\n                        \"webiny-fb-form-page-element-button webiny-pb-page-element-button webiny-pb-page-element-button--primary\" +\n                        (loading ? \" webiny-pb-element-button--loading\" : \"\")\n                    }\n                    onClick={submit}\n                    disabled={loading}\n                >\n                    <I18NValue value={buttonLabel} default=\"Submit\" />\n                </button>\n            </div>\n        );\n    };\n\n    return (\n        /* \"onSubmit\" callback gets triggered once all of the fields are valid. */\n        /* We also pass the default values for all fields via the getDefaultValues callback. */\n        <Form onSubmit={submitForm} data={getDefaultValues()}>\n            {({ submit, Bind, data }) => (\n                <div className={\"webiny-fb-form\"}>\n                    {formSuccess ? (\n                        renderSuccessMessage()\n                    ) : (\n                        <>\n                            {/* Let's render all form fields. */}\n                            <div>\n                                {fields.map((row, rowIndex) => (\n                                    <div\n                                        key={rowIndex}\n                                        className={\n                                            \"webiny-pb-base-page-element-style webiny-pb-layout-row webiny-fb-form-layout-row\"\n                                        }\n                                    >\n                                        {/* render form fields */}\n                                        {row.map(field =>\n                                            field.type !== \"hidden\"\n                                                ? renderFieldCell(field, Bind)\n                                                : renderHiddenField(field, Bind)\n                                        )}\n                                    </div>\n                                ))}\n                            </div>\n\n                            {/*\n                                At the bottom of the Form, we render the terms of service,\n                                the reCAPTCHA field and the submit button.\n                            */}\n                            {renderTermsOfService(Bind)}\n                            {renderReCaptcha(Bind)}\n                            {renderSubmitButton(\n                                submit,\n                                loading,\n                                data.tosAccepted,\n                                formData.settings.submitButtonLabel\n                            )}\n                        </>\n                    )}\n                </div>\n            )}\n        </Form>\n    );\n};\n\nexport default DefaultFormLayout;\n"]},"metadata":{},"sourceType":"module"}