{"ast":null,"code":"import _regeneratorRuntime from \"D:/webiny/webiny-v5/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"D:/webiny/webiny-v5/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"D:/webiny/webiny-v5/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { LOGIN } from \"@webiny/app-security-user-management/graphql\";\n/**\n * `getIdentityData` is a function that has to return information about the identity (a user within Webiny).\n * ========================================================================================\n * This function will be executed after Cognito (or any other identity provider you may use) validates the credentials\n * and obtains a valid JWT. Since JWT doesn't contain all the necessary information about a user, we need to perform the\n * \"login\" mutation, which doesn't really do anything except fetches the user's information our app needs (like permissions, avatar, etc.)\n *\n * Using this \"login\" mutation you can return custom data relevant to the business logic of your app.\n * The `payload` argument contains the whole JWT token so you can conditionally perform different mutations depending on\n * the information contained within the JWT.\n */\n\n/* eslint-disable-next-line @typescript-eslint/no-unused-vars */\n\nexport var getIdentityData = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var client, payload, _yield$client$mutate, data, identity;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            client = _ref.client, payload = _ref.payload;\n            _context.next = 3;\n            return client.mutate({\n              mutation: LOGIN\n            });\n\n          case 3:\n            _yield$client$mutate = _context.sent;\n            data = _yield$client$mutate.data;\n            identity = data.security.login.data;\n            return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, identity), {}, {\n              avatar: identity.avatar ? identity.avatar : {\n                src: identity.gravatar\n              }\n            }));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getIdentityData(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["D:/webiny/webiny-v5/apps/admin/code/components/getIdentityData.ts"],"names":["LOGIN","getIdentityData","client","payload","mutate","mutation","data","identity","security","login","avatar","src","gravatar"],"mappings":";;;;;;;;AAAA,SAASA,KAAT,QAAsB,8CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA,OAAO,IAAMC,eAAe;AAAA,uEAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,MAAT,QAASA,MAAT,EAAiBC,OAAjB,QAAiBA,OAAjB;AAAA;AAAA,mBACJD,MAAM,CAACE,MAAP,CAAc;AAAEC,cAAAA,QAAQ,EAAEL;AAAZ,aAAd,CADI;;AAAA;AAAA;AACnBM,YAAAA,IADmB,wBACnBA,IADmB;AAErBC,YAAAA,QAFqB,GAEVD,IAAI,CAACE,QAAL,CAAcC,KAAd,CAAoBH,IAFV;AAAA,6EAKpBC,QALoB;AAMvBG,cAAAA,MAAM,EAAEH,QAAQ,CAACG,MAAT,GAAkBH,QAAQ,CAACG,MAA3B,GAAoC;AAAEC,gBAAAA,GAAG,EAAEJ,QAAQ,CAACK;AAAhB;AANrB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfX,eAAe;AAAA;AAAA;AAAA,GAArB","sourcesContent":["import { LOGIN } from \"@webiny/app-security-user-management/graphql\";\n\n/**\n * `getIdentityData` is a function that has to return information about the identity (a user within Webiny).\n * ========================================================================================\n * This function will be executed after Cognito (or any other identity provider you may use) validates the credentials\n * and obtains a valid JWT. Since JWT doesn't contain all the necessary information about a user, we need to perform the\n * \"login\" mutation, which doesn't really do anything except fetches the user's information our app needs (like permissions, avatar, etc.)\n *\n * Using this \"login\" mutation you can return custom data relevant to the business logic of your app.\n * The `payload` argument contains the whole JWT token so you can conditionally perform different mutations depending on\n * the information contained within the JWT.\n */\n\n/* eslint-disable-next-line @typescript-eslint/no-unused-vars */\nexport const getIdentityData = async ({ client, payload }) => {\n    const { data } = await client.mutate({ mutation: LOGIN });\n    const identity = data.security.login.data;\n\n    return {\n        ...identity,\n        avatar: identity.avatar ? identity.avatar : { src: identity.gravatar }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}